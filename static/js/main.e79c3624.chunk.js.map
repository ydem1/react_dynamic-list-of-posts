{"version":3,"sources":["utils/fetchClient.ts","components/ListContext.tsx","components/UserSelector.tsx","api/users.ts","components/Loader/Loader.tsx","components/PostsList.tsx","components/MainContent.tsx","api/posts.ts","components/CommentItem.tsx","api/comments.ts","components/WriteCommmentButton.tsx","components/CommentsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["request","url","data","arguments","length","undefined","options","method","body","JSON","stringify","headers","delay","Promise","resolve","setTimeout","then","fetch","response","json","client","post","initialComments","ListContext","React","createContext","idUserActive","setIdUserActive","selectedPost","id","userId","title","setSelectedPost","isCommentFormVisible","setIsCommentFormVisible","comments","setComments","isErrorComment","setIsErrorComment","ListProvider","_ref","children","useState","value","useMemo","_jsx","Provider","UserSelector","_users$find","users","setUsers","isUsersVisble","setIsUsersVisble","useContext","useEffect","_jsxs","className","type","onClick","find","user","name","role","map","href","concat","classNames","handleUserClick","Loader","PostsList","posts","handleOpenPost","postId","MainContent","setPosts","isError","setIsError","isLoading","setIsLoading","content","postsFromServer","catch","CommentItem","comment","handleDeleteButton","commentId","deleteComment","newComments","deleteIndex","findIndex","currentComment","splice","email","WriteCommentButton","CommentsList","commentsFromServer","_Fragment","NewCommentForm","authorNameValue","setAuthorNameValue","authorEmailValue","setAuthorEmailValue","authorCommentValue","setAuthorCommentValue","isErrorNameValue","setIsErrorNameValue","isErrorEmailValue","setIsErrorEmailValue","isErrorCommentValue","setIsErrorCommentValue","handleReset","htmlFor","placeholder","onChange","event","target","preventDefault","trim","addComment","commentFromServer","PostDetails","Sidebar","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e79c3624.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useMemo } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst initialComments: Comment[] = [];\n\ninterface ListContextType {\n  idUserActive: number,\n  setIdUserActive: (idUserActive: number) => void,\n  selectedPost : Post,\n  setSelectedPost: (selectedPost: Post) => void,\n  isCommentFormVisible: boolean,\n  setIsCommentFormVisible: (isLoadingComments: boolean) => void,\n  comments : Comment[],\n  setComments: (comments: Comment[]) => void,\n  isErrorComment: boolean,\n  setIsErrorComment: (isErrorComment: boolean) => void,\n}\n\nexport const ListContext = React.createContext<ListContextType>({\n  idUserActive: -1,\n  setIdUserActive: () => { },\n  selectedPost: {\n    id: -1,\n    userId: -1,\n    title: '',\n    body: '',\n  },\n  setSelectedPost: () => { },\n  isCommentFormVisible: false,\n  setIsCommentFormVisible: () => { },\n  comments: initialComments,\n  setComments: () => { },\n  isErrorComment: false,\n  setIsErrorComment: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ListProvider: React.FC<Props> = ({ children }) => {\n  const [idUserActive, setIdUserActive] = useState(-1);\n  const [selectedPost, setSelectedPost] = useState<Post>({\n    id: -1,\n    userId: -1,\n    title: '',\n    body: '',\n  });\n  const [isCommentFormVisible, setIsCommentFormVisible] = useState(false);\n  const [comments, setComments] = useState<Comment[]>(initialComments);\n  const [isErrorComment, setIsErrorComment] = useState(false);\n\n  const value = useMemo(() => ({\n    idUserActive,\n    setIdUserActive,\n    selectedPost,\n    setSelectedPost,\n    isCommentFormVisible,\n    setIsCommentFormVisible,\n    comments,\n    setComments,\n    isErrorComment,\n    setIsErrorComment,\n  }), [\n    idUserActive,\n    selectedPost,\n    isCommentFormVisible,\n    comments,\n    isErrorComment,\n  ]);\n\n  return (\n    <ListContext.Provider value={value}>\n      {children}\n    </ListContext.Provider>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getAllUsers } from '../api/users';\nimport { ListContext } from './ListContext';\n\nexport const UserSelector: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isUsersVisble, setIsUsersVisble] = useState(false);\n  const {\n    idUserActive,\n    setSelectedPost,\n    setIdUserActive,\n  } = useContext(ListContext);\n\n  useEffect(() => {\n    getAllUsers().then(setUsers);\n  }, []);\n\n  const handleUserClick = (userId: number) => {\n    if (userId !== idUserActive) {\n      setIdUserActive(userId);\n      setSelectedPost({\n        id: -1,\n        userId: -1,\n        title: '',\n        body: '',\n      });\n    }\n\n    setIsUsersVisble(!isUsersVisble);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsUsersVisble(!isUsersVisble)}\n        >\n          <span>\n            {\n              idUserActive !== -1 ? (\n                users.find(user => user.id === idUserActive)?.name\n              ) : (\n                'Choose a user'\n              )\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersVisble && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {\n              users.map(user => (\n                <a\n                  href={`#user-${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': idUserActive === user.id,\n                  })}\n                  key={user.id}\n                  onClick={() => handleUserClick(user.id)}\n                >\n                  {user.name}\n                </a>\n              ))\n            }\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { ListContext } from './ListContext';\n\ntype Props = {\n  posts: Post[],\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  const {\n    selectedPost,\n    setSelectedPost,\n    setIsCommentFormVisible,\n  } = useContext(ListContext);\n\n  const handleOpenPost = (postId: number, post: Post) => {\n    if (postId === selectedPost.id) {\n      setSelectedPost({\n        id: -1,\n        userId: -1,\n        title: '',\n        body: '',\n      });\n    } else {\n      setSelectedPost(post);\n    }\n\n    setIsCommentFormVisible(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            posts.map(post => (\n              <tr\n                data-cy=\"Post\"\n                key={post.id}\n              >\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': post.id !== selectedPost.id,\n                    })}\n                    onClick={() => handleOpenPost(post.id, post)}\n                  >\n                    {\n                      post.id === selectedPost.id ? (\n                        'Close'\n                      ) : (\n                        'Open'\n                      )\n                    }\n                  </button>\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { ListContext } from './ListContext';\nimport { Post } from '../types/Post';\nimport { getPosts } from '../api/posts';\nimport { PostsList } from './PostsList';\n\nexport const MainContent: React.FC = () => {\n  const {\n    idUserActive,\n  } = useContext(ListContext);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (idUserActive !== -1) {\n      setIsLoading(true);\n      setIsError(false);\n\n      getPosts(idUserActive).then(postsFromServer => {\n        setPosts(postsFromServer);\n        setIsLoading(false);\n        setIsError(false);\n      })\n        .catch(() => {\n          setIsError(true);\n          setIsLoading(false);\n        });\n    }\n  }, [idUserActive]);\n\n  let content;\n\n  if (idUserActive === -1) {\n    content = <p data-cy=\"NoSelectedUser\">No user selected</p>;\n  } else if (isLoading) {\n    content = <Loader />;\n  } else if (isError) {\n    content = (\n      <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n        Something went wrong!\n      </div>\n    );\n  } else if (posts.length === 0) {\n    content = (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  } else {\n    content = <PostsList posts={posts} />;\n  }\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {content}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { useContext } from 'react';\nimport { deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { ListContext } from './ListContext';\n\ntype Props = {\n  comment: Comment,\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const { comments, setComments } = useContext(ListContext);\n\n  const handleDeleteButton = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        const newComments = [...comments];\n        const deleteIndex = newComments.findIndex(currentComment => (\n          currentComment.id === commentId));\n\n        newComments.splice(deleteIndex, 1);\n\n        setComments(newComments);\n      });\n  };\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteButton(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext } from 'react';\nimport { ListContext } from './ListContext';\n\nexport const WriteCommentButton: React.FC = () => {\n  const {\n    setIsCommentFormVisible,\n    isCommentFormVisible,\n  } = useContext(ListContext);\n\n  return (\n    !isCommentFormVisible ? (\n      <button\n        data-cy=\"WriteCommentButton\"\n        type=\"button\"\n        className=\"button is-link\"\n        onClick={() => setIsCommentFormVisible(true)}\n      >\n        Write a comment\n      </button>\n    ) : (\n      null\n    )\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { CommentItem } from './CommentItem';\nimport { getComments } from '../api/comments';\nimport { ListContext } from './ListContext';\nimport { Loader } from './Loader';\nimport { WriteCommentButton } from './WriteCommmentButton';\n\nexport const CommentsList: React.FC = () => {\n  const {\n    selectedPost,\n    comments,\n    setComments,\n    isErrorComment,\n    setIsErrorComment,\n  } = useContext(ListContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsErrorComment(false);\n\n    getComments(selectedPost.id).then(commentsFromServer => {\n      setComments(commentsFromServer);\n      setIsLoading(false);\n    })\n      .catch(() => {\n        setIsLoading(false);\n        setIsErrorComment(true);\n        setComments([]);\n      });\n  }, [selectedPost]);\n\n  let content;\n\n  if (isLoading) {\n    content = <Loader />;\n  } else if (isErrorComment) {\n    content = (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  } else if (comments?.length === 0) {\n    content = (\n      <>\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n\n        <WriteCommentButton />\n      </>\n\n    );\n  } else {\n    content = (\n      <>\n        <p className=\"title is-4\">Comments:</p>\n\n        {comments?.map(comment => (\n          <CommentItem\n            key={comment.id}\n            comment={comment}\n          />\n        ))}\n\n        <WriteCommentButton />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      {content}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api/comments';\nimport { ListContext } from './ListContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    setIsCommentFormVisible,\n    selectedPost,\n    comments,\n    setComments,\n    setIsErrorComment,\n  } = useContext(ListContext);\n\n  const [authorNameValue, setAuthorNameValue] = useState('');\n  const [authorEmailValue, setAuthorEmailValue] = useState('');\n  const [authorCommentValue, setAuthorCommentValue] = useState('');\n\n  const [isErrorNameValue, setIsErrorNameValue] = useState(false);\n  const [isErrorEmailValue, setIsErrorEmailValue] = useState(false);\n  const [isErrorCommentValue, setIsErrorCommentValue] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuthorNameValue(event.target.value);\n    setIsErrorNameValue(false);\n  };\n\n  const handleInputEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuthorEmailValue(event.target.value);\n    setIsErrorEmailValue(false);\n  };\n\n  const handleInputComment\n    = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setAuthorCommentValue(event.target.value);\n      setIsErrorCommentValue(false);\n    };\n\n  const handleReset = () => {\n    setAuthorNameValue('');\n    setAuthorEmailValue('');\n    setAuthorCommentValue('');\n  };\n\n  const handleSubmit\n    = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.preventDefault();\n\n      if (!authorNameValue.trim()) {\n        setIsErrorNameValue(true);\n      }\n\n      if (!authorEmailValue.trim()) {\n        setIsErrorEmailValue(true);\n      }\n\n      if (!authorCommentValue.trim()) {\n        setIsErrorCommentValue(true);\n      }\n\n      if (authorNameValue.trim()\n        && authorEmailValue.trim()\n        && authorCommentValue.trim()) {\n        setIsLoading(true);\n\n        addComment({\n          postId: selectedPost.id,\n          name: authorNameValue,\n          email: authorEmailValue,\n          body: authorCommentValue,\n        }).then((commentFromServer) => {\n          setAuthorCommentValue('');\n          setIsLoading(false);\n          setComments([...comments, commentFromServer]);\n        }).catch(() => {\n          setIsErrorComment(true);\n          handleReset();\n          setIsCommentFormVisible(false);\n        });\n      }\n    };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isErrorNameValue,\n            })}\n            value={authorNameValue}\n            onChange={handleInputName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorNameValue && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorNameValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isErrorEmailValue,\n            })}\n            value={authorEmailValue}\n            onChange={handleInputEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmailValue && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmailValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isErrorCommentValue,\n            })}\n            value={authorCommentValue}\n            onChange={handleInputComment}\n          />\n        </div>\n\n        {isErrorCommentValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { NewCommentForm } from './NewCommentForm';\nimport { ListContext } from './ListContext';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const {\n    isCommentFormVisible,\n  } = useContext(ListContext);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <CommentsList />\n\n        {isCommentFormVisible && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from './PostDetails';\nimport { ListContext } from './ListContext';\n\nexport const Sidebar: React.FC = () => {\n  const { selectedPost } = useContext(ListContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': selectedPost.id !== -1 },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails post={selectedPost} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector';\nimport { ListProvider } from './components/ListContext';\nimport { MainContent } from './components/MainContent';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <ListProvider>\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </div>\n\n            </div>\n\n            <Sidebar />\n          </div>\n        </ListProvider>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
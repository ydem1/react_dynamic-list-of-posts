{"version":3,"sources":["utils/fetchClient.ts","components/ListContext.tsx","components/User.tsx","components/UserSelector.tsx","api/users.ts","components/Loader/Loader.tsx","components/PostItem.tsx","components/PostsList.tsx","components/MainContent.tsx","api/posts.ts","components/CommentItem.tsx","api/comments.ts","components/WriteCommmentButton.tsx","components/CommentsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["request","url","data","arguments","length","undefined","options","method","body","JSON","stringify","headers","delay","Promise","resolve","setTimeout","then","fetch","response","json","client","post","initialComments","ListContext","React","createContext","idUserActive","setIdUserActive","selectedPost","id","userId","title","setSelectedPost","isCommentFormVisible","setIsCommentFormVisible","comments","setComments","isErrorComment","setIsErrorComment","ListProvider","_ref","children","useState","value","useMemo","_jsx","Provider","User","user","selectUser","href","concat","className","classNames","onClick","name","UserSelector","_users$find","users","setUsers","isUsersVisble","setIsUsersVisble","useContext","useEffect","handleUserClick","_jsxs","type","find","role","map","Loader","PostItem","openPost","PostsList","posts","handleOpenPost","postId","MainContent","setPosts","isError","setIsError","isLoading","setIsLoading","postsFromServer","catch","CommentItem","comment","handleDeleteButton","commentId","deleteComment","newComments","filter","currentComment","email","WriteCommentButton","CommentsList","commentsFromServer","NewCommentForm","authorNameValue","setAuthorNameValue","authorEmailValue","setAuthorEmailValue","authorCommentValue","setAuthorCommentValue","isErrorNameValue","setIsErrorNameValue","isErrorEmailValue","setIsErrorEmailValue","isErrorCommentValue","setIsErrorCommentValue","handleReset","htmlFor","placeholder","onChange","event","target","preventDefault","trim","addComment","commentFromServer","PostDetails","Sidebar","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec51f586.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useMemo } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst initialComments: Comment[] = [];\n\ninterface ListContextType {\n  idUserActive: number,\n  setIdUserActive: (idUserActive: number) => void,\n  selectedPost : Post,\n  setSelectedPost: (selectedPost: Post) => void,\n  isCommentFormVisible: boolean,\n  setIsCommentFormVisible: (isLoadingComments: boolean) => void,\n  comments : Comment[],\n  setComments: (comments: Comment[]) => void,\n  isErrorComment: boolean,\n  setIsErrorComment: (isErrorComment: boolean) => void,\n}\n\nexport const ListContext = React.createContext<ListContextType>({\n  idUserActive: -1,\n  setIdUserActive: () => { },\n  selectedPost: {\n    id: -1,\n    userId: -1,\n    title: '',\n    body: '',\n  },\n  setSelectedPost: () => { },\n  isCommentFormVisible: false,\n  setIsCommentFormVisible: () => { },\n  comments: initialComments,\n  setComments: () => { },\n  isErrorComment: false,\n  setIsErrorComment: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ListProvider: React.FC<Props> = ({ children }) => {\n  const [idUserActive, setIdUserActive] = useState(-1);\n  const [selectedPost, setSelectedPost] = useState<Post>({\n    id: -1,\n    userId: -1,\n    title: '',\n    body: '',\n  });\n  const [isCommentFormVisible, setIsCommentFormVisible] = useState(false);\n  const [comments, setComments] = useState<Comment[]>(initialComments);\n  const [isErrorComment, setIsErrorComment] = useState(false);\n\n  const value = useMemo(() => ({\n    idUserActive,\n    setIdUserActive,\n    selectedPost,\n    setSelectedPost,\n    isCommentFormVisible,\n    setIsCommentFormVisible,\n    comments,\n    setComments,\n    isErrorComment,\n    setIsErrorComment,\n  }), [\n    idUserActive,\n    selectedPost,\n    isCommentFormVisible,\n    comments,\n    isErrorComment,\n  ]);\n\n  return (\n    <ListContext.Provider value={value}>\n      {children}\n    </ListContext.Provider>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User as UserType } from '../types/User';\n\ntype Props = {\n  user: UserType,\n  selectUser: (userId: number) => void,\n  idUserActive: number,\n};\n\nexport const User: React.FC<Props> = ({ user, selectUser, idUserActive }) => {\n  return (\n    <a\n      href={`#user-${user.id}`}\n      className={classNames('dropdown-item', {\n        'is-active': idUserActive === user.id,\n      })}\n      onClick={() => selectUser(user.id)}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { User as UserType } from '../types/User';\nimport { getAllUsers } from '../api/users';\nimport { ListContext } from './ListContext';\nimport { User } from './User';\n\nexport const UserSelector: React.FC = () => {\n  const [users, setUsers] = useState<UserType[]>([]);\n  const [isUsersVisble, setIsUsersVisble] = useState(false);\n  const {\n    idUserActive,\n    setSelectedPost,\n    setIdUserActive,\n  } = useContext(ListContext);\n\n  useEffect(() => {\n    getAllUsers().then(setUsers);\n  }, []);\n\n  const handleUserClick = (userId: number) => {\n    if (userId !== idUserActive) {\n      setIdUserActive(userId);\n      setSelectedPost({\n        id: -1,\n        userId: -1,\n        title: '',\n        body: '',\n      });\n    }\n\n    setIsUsersVisble(!isUsersVisble);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsUsersVisble(!isUsersVisble)}\n        >\n          <span>\n            {\n              idUserActive !== -1 ? (\n                users.find(user => user.id === idUserActive)?.name\n              ) : (\n                'Choose a user'\n              )\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersVisble && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {\n              users.map(user => (\n                <User\n                  user={user}\n                  key={user.id}\n                  selectUser={handleUserClick}\n                  idUserActive={idUserActive}\n                />\n              ))\n            }\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPost: Post,\n  openPost: (postId: number, post: Post) => void,\n};\n\nexport const PostItem: React.FC<Props> = ({ post, selectedPost, openPost }) => {\n  return (\n    <tr\n      data-cy=\"Post\"\n      key={post.id}\n    >\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', {\n            'is-light': post.id !== selectedPost.id,\n          })}\n          onClick={() => openPost(post.id, post)}\n        >\n          {\n            post.id === selectedPost.id ? (\n              'Close'\n            ) : (\n              'Open'\n            )\n          }\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport { Post } from '../types/Post';\nimport { ListContext } from './ListContext';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  const {\n    selectedPost,\n    setSelectedPost,\n    setIsCommentFormVisible,\n  } = useContext(ListContext);\n\n  const handleOpenPost = (postId: number, post: Post) => {\n    if (postId === selectedPost.id) {\n      setSelectedPost({\n        id: -1,\n        userId: -1,\n        title: '',\n        body: '',\n      });\n    } else {\n      setSelectedPost(post);\n    }\n\n    setIsCommentFormVisible(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            posts.map(post => (\n              <PostItem\n                post={post}\n                selectedPost={selectedPost}\n                openPost={handleOpenPost}\n                key={post.id}\n              />\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { ListContext } from './ListContext';\nimport { Post } from '../types/Post';\nimport { getPosts } from '../api/posts';\nimport { PostsList } from './PostsList';\n\nexport const MainContent: React.FC = () => {\n  const {\n    idUserActive,\n  } = useContext(ListContext);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (idUserActive !== -1) {\n      setIsLoading(true);\n      setIsError(false);\n\n      getPosts(idUserActive).then(postsFromServer => {\n        setPosts(postsFromServer);\n        setIsLoading(false);\n        setIsError(false);\n      })\n        .catch(() => {\n          setIsError(true);\n          setIsLoading(false);\n        });\n    }\n  }, [idUserActive]);\n\n  if (idUserActive === -1) {\n    return (\n      <div className=\"block\" data-cy=\"MainContent\">\n        <p data-cy=\"NoSelectedUser\">No user selected</p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"block\" data-cy=\"MainContent\">\n        <Loader />\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"block\" data-cy=\"MainContent\">\n        <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n          Something went wrong!\n        </div>\n      </div>\n    );\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"block\" data-cy=\"MainContent\">\n        <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n          No posts yet\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      <PostsList posts={posts} />\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { useContext } from 'react';\nimport { deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { ListContext } from './ListContext';\n\ntype Props = {\n  comment: Comment,\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const { comments, setComments } = useContext(ListContext);\n\n  const handleDeleteButton = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        const newComments = comments.filter(currentComment => (\n          currentComment.id !== commentId));\n\n        setComments(newComments);\n      });\n  };\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteButton(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext } from 'react';\nimport { ListContext } from './ListContext';\n\nexport const WriteCommentButton: React.FC = () => {\n  const {\n    setIsCommentFormVisible,\n    isCommentFormVisible,\n  } = useContext(ListContext);\n\n  return (\n    !isCommentFormVisible ? (\n      <button\n        data-cy=\"WriteCommentButton\"\n        type=\"button\"\n        className=\"button is-link\"\n        onClick={() => setIsCommentFormVisible(true)}\n      >\n        Write a comment\n      </button>\n    ) : (\n      null\n    )\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { CommentItem } from './CommentItem';\nimport { getComments } from '../api/comments';\nimport { ListContext } from './ListContext';\nimport { Loader } from './Loader';\nimport { WriteCommentButton } from './WriteCommmentButton';\n\nexport const CommentsList: React.FC = () => {\n  const {\n    selectedPost,\n    comments,\n    setComments,\n    isErrorComment,\n    setIsErrorComment,\n  } = useContext(ListContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsErrorComment(false);\n\n    getComments(selectedPost.id).then(commentsFromServer => {\n      setComments(commentsFromServer);\n      setIsLoading(false);\n    })\n      .catch(() => {\n        setIsLoading(false);\n        setIsErrorComment(true);\n        setComments([]);\n      });\n  }, [selectedPost, setComments, setIsErrorComment]);\n\n  if (isLoading) {\n    return (\n      <div className=\"block\">\n        <Loader />\n      </div>\n    );\n  }\n\n  if (isErrorComment) {\n    return (\n      <div className=\"block\">\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      </div>\n    );\n  }\n\n  if (comments?.length === 0) {\n    return (\n      <div className=\"block\">\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n\n        <WriteCommentButton />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments?.map(comment => (\n        <CommentItem\n          key={comment.id}\n          comment={comment}\n        />\n      ))}\n\n      <WriteCommentButton />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api/comments';\nimport { ListContext } from './ListContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    setIsCommentFormVisible,\n    selectedPost,\n    comments,\n    setComments,\n    setIsErrorComment,\n  } = useContext(ListContext);\n\n  const [authorNameValue, setAuthorNameValue] = useState('');\n  const [authorEmailValue, setAuthorEmailValue] = useState('');\n  const [authorCommentValue, setAuthorCommentValue] = useState('');\n\n  const [isErrorNameValue, setIsErrorNameValue] = useState(false);\n  const [isErrorEmailValue, setIsErrorEmailValue] = useState(false);\n  const [isErrorCommentValue, setIsErrorCommentValue] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuthorNameValue(event.target.value);\n    setIsErrorNameValue(false);\n  };\n\n  const handleInputEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuthorEmailValue(event.target.value);\n    setIsErrorEmailValue(false);\n  };\n\n  const handleInputComment\n    = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setAuthorCommentValue(event.target.value);\n      setIsErrorCommentValue(false);\n    };\n\n  const handleReset = () => {\n    setAuthorNameValue('');\n    setAuthorEmailValue('');\n    setAuthorCommentValue('');\n  };\n\n  const handleSubmit\n    = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.preventDefault();\n\n      if (!authorNameValue.trim()) {\n        setIsErrorNameValue(true);\n      }\n\n      if (!authorEmailValue.trim()) {\n        setIsErrorEmailValue(true);\n      }\n\n      if (!authorCommentValue.trim()) {\n        setIsErrorCommentValue(true);\n      }\n\n      if (authorNameValue.trim()\n        && authorEmailValue.trim()\n        && authorCommentValue.trim()) {\n        setIsLoading(true);\n\n        addComment({\n          postId: selectedPost.id,\n          name: authorNameValue,\n          email: authorEmailValue,\n          body: authorCommentValue,\n        }).then((commentFromServer) => {\n          setAuthorCommentValue('');\n          setIsLoading(false);\n          setComments([...comments, commentFromServer]);\n        }).catch(() => {\n          setIsErrorComment(true);\n          handleReset();\n          setIsCommentFormVisible(false);\n        });\n      }\n    };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isErrorNameValue,\n            })}\n            value={authorNameValue}\n            onChange={handleInputName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorNameValue && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorNameValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isErrorEmailValue,\n            })}\n            value={authorEmailValue}\n            onChange={handleInputEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmailValue && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmailValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isErrorCommentValue,\n            })}\n            value={authorCommentValue}\n            onChange={handleInputComment}\n          />\n        </div>\n\n        {isErrorCommentValue && (\n          <p className=\"help is-danger\" data-cy=\"errorMessagePosts\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { NewCommentForm } from './NewCommentForm';\nimport { ListContext } from './ListContext';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const {\n    isCommentFormVisible,\n  } = useContext(ListContext);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <CommentsList />\n\n        {isCommentFormVisible && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from './PostDetails';\nimport { ListContext } from './ListContext';\n\nexport const Sidebar: React.FC = () => {\n  const { selectedPost } = useContext(ListContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': selectedPost.id !== -1 },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails post={selectedPost} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector';\nimport { ListProvider } from './components/ListContext';\nimport { MainContent } from './components/MainContent';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <ListProvider>\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </div>\n\n            </div>\n\n            <Sidebar />\n          </div>\n        </ListProvider>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}